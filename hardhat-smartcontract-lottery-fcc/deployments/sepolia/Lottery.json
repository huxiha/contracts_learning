{
  "address": "0xAc10a5446cC582dFC040F0defA8AF24C77F5c837",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughEntranceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotterEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryStatus",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c445897047ea182374e67cc3c2b29f25cad2fd7ccdfeb8b2312def3737c28fb",
  "receipt": {
    "to": null,
    "from": "0x07b3D9cB1E9Bb3bc1fB4A8cB1097d17BAB8DE6be",
    "contractAddress": "0xAc10a5446cC582dFC040F0defA8AF24C77F5c837",
    "transactionIndex": 1,
    "gasUsed": "1197398",
    "logsBloom": "0x
    "blockHash": "0xcfbbc0522235b76ca76f8486ac3041afd17a1c735d90bb2ae883f4a6b696a463",
    "transactionHash": "0x2c445897047ea182374e67cc3c2b29f25cad2fd7ccdfeb8b2312def3737c28fb",
    "logs": [],
    "blockNumber": 3370440,
    "cumulativeGasUsed": "1246187",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1538",
    "500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "a5610e9d848b75ec29e4b02550c7c57a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughEntranceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotterEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryStatus\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"huxixi\",\"details\":\"\\u5f00\\u53d1\\u501f\\u52a9chainlink VRF\\u751f\\u6210\\u968f\\u673a\\u6570\\u548cchainlink automation\\u81ea\\u52a8\\u9009\\u62e9\\u4e2d\\u5956\\u4eba\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"\\u53ea\\u6709\\u5728\\u5f69\\u7968\\u72b6\\u6001\\u662f\\u5f00\\u653e\\uff0c\\u4e14\\u5230\\u5f00\\u5956\\u65f6\\u95f4\\u95f4\\u9694\\u4e14\\u6709\\u73a9\\u5bb6\\u53c2\\u4e0e\\u4e14\\u5f69\\u7968\\u6c60\\u6709\\u4f59\\u989d\\u7684\\u60c5\\u51b5\\u4e0b\\u81ea\\u52a8\\u5f00\\u5956\"}},\"title\":\"\\u4e00\\u4e2a\\u7b80\\u5355\\u7684\\u5f69\\u7968\\u5408\\u7ea6\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u8fd9\\u662f\\u4e00\\u4e2a\\u53bb\\u4e2d\\u5fc3\\u5316\\u5408\\u7ea6\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Lottery__NotEnoughEntranceFee();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery__UpkeepNotNeeded(\\n    uint256 lotteryStatus,\\n    uint256 numPlayers,\\n    uint256 currentBalance\\n);\\n\\n/**\\n * @title \\u4e00\\u4e2a\\u7b80\\u5355\\u7684\\u5f69\\u7968\\u5408\\u7ea6\\n * @author huxixi\\n * @notice \\u8fd9\\u662f\\u4e00\\u4e2a\\u53bb\\u4e2d\\u5fc3\\u5316\\u5408\\u7ea6\\n * @dev \\u5f00\\u53d1\\u501f\\u52a9chainlink VRF\\u751f\\u6210\\u968f\\u673a\\u6570\\u548cchainlink automation\\u81ea\\u52a8\\u9009\\u62e9\\u4e2d\\u5956\\u4eba\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    // \\u5f69\\u7968\\u6e38\\u620f\\u72b6\\u6001\\n    enum LotteryStatus {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    //\\u7968\\u4ef7\\u53ea\\u80fd\\u5728\\u521b\\u5efa\\u5408\\u7ea6\\u65f6\\u88ab\\u8d4b\\u503c\\u4e00\\u6b21\\uff0c\\u4e0d\\u80fd\\u4fee\\u6539\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    address private s_recentWinner;\\n    LotteryStatus private s_lotteryStatus;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event LotterEnter(address indexed player);\\n    event requestedLotteryWinner(uint256 indexed requestId);\\n    event winnerPicked(address winner);\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryStatus = LotteryStatus.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function entryLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughEntranceFee();\\n        }\\n        if (s_lotteryStatus != LotteryStatus.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotterEnter(msg.sender);\\n    }\\n\\n    /**\\n     *\\n     * @dev \\u53ea\\u6709\\u5728\\u5f69\\u7968\\u72b6\\u6001\\u662f\\u5f00\\u653e\\uff0c\\u4e14\\u5230\\u5f00\\u5956\\u65f6\\u95f4\\u95f4\\u9694\\u4e14\\u6709\\u73a9\\u5bb6\\u53c2\\u4e0e\\u4e14\\u5f69\\u7968\\u6c60\\u6709\\u4f59\\u989d\\u7684\\u60c5\\u51b5\\u4e0b\\u81ea\\u52a8\\u5f00\\u5956\\n     */\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (s_lotteryStatus == LotteryStatus.OPEN);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayer = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayer && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        if (\\n            (s_lotteryStatus == LotteryStatus.OPEN) &&\\n            (block.timestamp - s_lastTimeStamp) > i_interval &&\\n            s_players.length > 0 &&\\n            address(this).balance > 0\\n        ) {\\n            uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane,\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                NUM_WORDS\\n            );\\n            emit requestedLotteryWinner(requestId);\\n            s_lotteryStatus = LotteryStatus.CALCULATING;\\n        } else {\\n            revert Lottery__UpkeepNotNeeded(\\n                uint256(s_lotteryStatus),\\n                s_players.length,\\n                address(this).balance\\n            );\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, // requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        //\\u8d62\\u5bb6\\u5f97\\u5230\\u5408\\u7ea6\\u8d26\\u6237\\u4e2d\\u7684\\u6240\\u6709\\u4f59\\u989d\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit winnerPicked(recentWinner);\\n        //\\u91cd\\u542f\\u4e0b\\u4e00\\u8f6e\\n        s_lotteryStatus = LotteryStatus.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    //\\u83b7\\u53d6\\u7968\\u4ef7\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    //\\u83b7\\u53d6\\u73a9\\u5bb6\\u8d26\\u6237\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    //\\u83b7\\u53d6\\u5f53\\u524d\\u7684\\u8d62\\u5bb6\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    //\\u83b7\\u53d6\\u5f69\\u7968\\u6e38\\u620f\\u5f53\\u524d\\u72b6\\u6001\\n    function getLotteryStatus() public view returns (LotteryStatus) {\\n        return s_lotteryStatus;\\n    }\\n\\n    //\\u83b7\\u53d6\\u5f53\\u524d\\u8bbe\\u7f6e\\u7684\\u4e2d\\u5956\\u4eba\\u6570\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    //\\u83b7\\u53d6\\u672c\\u8f6e\\u6e38\\u620f\\u53c2\\u4e0e\\u4eba\\u6570\\n    function getPlayersNumber() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    //\\u83b7\\u53d6\\u672c\\u8f6e\\u6e38\\u620f\\u5f00\\u59cb\\u65f6\\u95f4\\u6233\\n    function getLastTimestamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    //\\u83b7\\u53d6\\u751f\\u6210\\u968f\\u673a\\u6570\\u65f6\\u7684\\u786e\\u8ba4\\u5757\\u6570\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    //\\u83b7\\u53d6\\u62bd\\u5956\\u95f4\\u9694\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x4a1ee860d697cdeae5ed87a26775ea25e6586d93421c245eb22b722d06a930ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017ec380380620017ec833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611416620003d66000396000818161043f015281816106e9015261076501526000610513015260006104f0015260006104cf015260006104930152600081816102fa015261078b015260008181610320015261037401526114166000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f578063766eef1111610059578063766eef111461025957806391ad27b414610284578063cae3acaf146102af578063e55ae4e8146102b9576100c2565b806353a2c19a146101c55780635f1b0fd8146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f25780632b6524cd1461011b57806337899770146101465780634585e33b14610171578063473f1ddc1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c24565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dd8565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610eab565b60405180910390f35b34801561015257600080fd5b5061015b6103f5565b6040516101689190610c24565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190610f21565b6103ff565b005b3480156101a657600080fd5b506101af610661565b6040516101bc9190610faf565b60405180910390f35b3480156101d157600080fd5b506101da61068b565b6040516101e79190610c24565b60405180910390f35b3480156101fc57600080fd5b5061020561069a565b6040516102129190610c24565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190610f21565b6106a7565b604051610250929190611064565b60405180910390f35b34801561026557600080fd5b5061026e610755565b60405161027b9190610c24565b60405180910390f35b34801561029057600080fd5b50610299610761565b6040516102a69190610c24565b60405180910390f35b6102b7610789565b005b3480156102c557600080fd5b506102e060048036038101906102db9190611094565b6108f8565b6040516102ed9190610faf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c79291906110c1565b60405180910390fd5b6103da828261093f565b5050565b6000600160149054906101000a900460ff16905090565b6000600254905090565b6000600181111561041357610412610e34565b5b600160149054906101000a900460ff16600181111561043557610434610e34565b5b14801561046e57507f00000000000000000000000000000000000000000000000000000000000000006002544261046c9190611119565b115b801561047e575060008080549050115b801561048a5750600047115b156105f65760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105549594939291906111c5565b6020604051808303816000875af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610597919061122d565b9050807f8436886e362e85384c64d5af46721d434cb451102c48870819d9f8420f55317660405160405180910390a260018060146101000a81548160ff021916908360018111156105eb576105ea610e34565b5b02179055505061065d565b600160149054906101000a900460ff16600181111561061857610617610e34565b5b600080549050476040517f6e195f250000000000000000000000000000000000000000000000000000000081526004016106549392919061125a565b60405180910390fd5b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060018111156106c0576106bf610e34565b5b600160149054906101000a900460ff1660018111156106e2576106e1610e34565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107169190611119565b119050600080600080549050119050600080471190508380156107365750825b801561073f5750815b80156107485750805b9550505050509250929050565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107e3576040517fd843bb4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107f7576107f6610e34565b5b600160149054906101000a900460ff16600181111561081957610818610e34565b5b14610850576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fcfe396faec77b3c27edce0bdc8bc39997f6c5cae2906051cb08b9278c53a556a60405160405180910390a2565b600080828154811061090d5761090c611291565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080805490508260008151811061095a57610959611291565b5b602002602001015161096c91906112ef565b9050600080828154811061098357610982611291565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a1790611351565b60006040518083038185875af1925050503d8060008114610a54576040519150601f19603f3d011682016040523d82523d6000602084013e610a59565b606091505b5050905080610a94576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d182604051610ac391906113c5565b60405180910390a16000600160146101000a81548160ff02191690836001811115610af157610af0610e34565b5b0217905550600067ffffffffffffffff811115610b1157610b10610c95565b5b604051908082528060200260200182016040528015610b3f5781602001602082028036833780820191505090505b5060009080519060200190610b55929190610b64565b50426002819055505050505050565b828054828255906000526020600020908101928215610bdd579160200282015b82811115610bdc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b84565b5b509050610bea9190610bee565b5090565b5b80821115610c07576000816000905550600101610bef565b5090565b6000819050919050565b610c1e81610c0b565b82525050565b6000602082019050610c396000830184610c15565b92915050565b6000604051905090565b600080fd5b600080fd5b610c5c81610c0b565b8114610c6757600080fd5b50565b600081359050610c7981610c53565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ccd82610c84565b810181811067ffffffffffffffff82111715610cec57610ceb610c95565b5b80604052505050565b6000610cff610c3f565b9050610d0b8282610cc4565b919050565b600067ffffffffffffffff821115610d2b57610d2a610c95565b5b602082029050602081019050919050565b600080fd5b6000610d54610d4f84610d10565b610cf5565b90508083825260208201905060208402830185811115610d7757610d76610d3c565b5b835b81811015610da05780610d8c8882610c6a565b845260208401935050602081019050610d79565b5050509392505050565b600082601f830112610dbf57610dbe610c7f565b5b8135610dcf848260208601610d41565b91505092915050565b60008060408385031215610def57610dee610c49565b5b6000610dfd85828601610c6a565b925050602083013567ffffffffffffffff811115610e1e57610e1d610c4e565b5b610e2a85828601610daa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e7457610e73610e34565b5b50565b6000819050610e8582610e63565b919050565b6000610e9582610e77565b9050919050565b610ea581610e8a565b82525050565b6000602082019050610ec06000830184610e9c565b92915050565b600080fd5b60008083601f840112610ee157610ee0610c7f565b5b8235905067ffffffffffffffff811115610efe57610efd610ec6565b5b602083019150836001820283011115610f1a57610f19610d3c565b5b9250929050565b60008060208385031215610f3857610f37610c49565b5b600083013567ffffffffffffffff811115610f5657610f55610c4e565b5b610f6285828601610ecb565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9982610f6e565b9050919050565b610fa981610f8e565b82525050565b6000602082019050610fc46000830184610fa0565b92915050565b60008115159050919050565b610fdf81610fca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561101f578082015181840152602081019050611004565b60008484015250505050565b600061103682610fe5565b6110408185610ff0565b9350611050818560208601611001565b61105981610c84565b840191505092915050565b60006040820190506110796000830185610fd6565b818103602083015261108b818461102b565b90509392505050565b6000602082840312156110aa576110a9610c49565b5b60006110b884828501610c6a565b91505092915050565b60006040820190506110d66000830185610fa0565b6110e36020830184610fa0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061112482610c0b565b915061112f83610c0b565b9250828203905081811115611147576111466110ea565b5b92915050565b6000819050919050565b6111608161114d565b82525050565b600067ffffffffffffffff82169050919050565b61118381611166565b82525050565b600061ffff82169050919050565b6111a081611189565b82525050565b600063ffffffff82169050919050565b6111bf816111a6565b82525050565b600060a0820190506111da6000830188611157565b6111e7602083018761117a565b6111f46040830186611197565b61120160608301856111b6565b61120e60808301846111b6565b9695505050505050565b60008151905061122781610c53565b92915050565b60006020828403121561124357611242610c49565b5b600061125184828501611218565b91505092915050565b600060608201905061126f6000830186610c15565b61127c6020830185610c15565b6112896040830184610c15565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112fa82610c0b565b915061130583610c0b565b925082611315576113146112c0565b5b828206905092915050565b600081905092915050565b50565b600061133b600083611320565b91506113468261132b565b600082019050919050565b600061135c8261132e565b9150819050919050565b6000819050919050565b600061138b61138661138184610f6e565b611366565b610f6e565b9050919050565b600061139d82611370565b9050919050565b60006113af82611392565b9050919050565b6113bf816113a4565b82525050565b60006020820190506113da60008301846113b6565b9291505056fea264697066735822122074ae7894c825c6af29a0cb0c5b1840f1fbbbd7ed8320c06aa7aa19edd876fa5164736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "huxixi",
    "details": "开发借助chainlink VRF生成随机数和chainlink automation自动选择中奖人",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "只有在彩票状态是开放，且到开奖时间间隔且有玩家参与且彩票池有余额的情况下自动开奖"
      }
    },
    "title": "一个简单的彩票合约",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "这是一个去中心化合约",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 260,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 263,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryStatus",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryStatus)238"
      },
      {
        "astId": 265,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryStatus)238": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryStatus",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}